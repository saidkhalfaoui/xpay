{
	"info": {
		"_postman_id": "a545781c-4a93-477c-9ea5-9481f561f36c",
		"name": "spell_collection",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29118306"
	},
	"item": [
		{
			"name": "purchases",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "Qb8MV4wTs6HcwWPI7L_Rau8f4R5eHFvKFsQRYqHRIywROQsfJTSqYfVtZQmugg5iwRz_4wKYX92cvZ1tO5eAlw==",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"client\": {\n    \"email\": \"test@test.com\"\n  },\n  \"purchase\": {\n    \"products\": [\n      {\n        \"name\": \"test\",\n        \"price\": 100\n      }\n   \n    \n    ] \n    \n\n  },\n  \"brand_id\": \"ea83f656-7461-496e-a479-9f5ac3a66bc3\",\n  \"success_redirect\": \"https://xpay.com\",\n  \"failure_redirect\": \"https://xpay.com/fail\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://gate.xpay.com/api/v1/purchases/",
					"protocol": "https",
					"host": [
						"gate",
						"xpay",
						"com"
					],
					"path": [
						"api",
						"v1",
						"purchases",
						""
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "direct_post",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "CHLymsSpzLn2HSgHUK8meARVCsZZhzYnRfcg5BVNFnXvWx76jeZdW5NTbkqWTXt8JAYDd9S4",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"cardholder_name\": \"John Doe\",\r\n  \"card_number\": \"4444333322221111\",\r\n  \"expires\": \"01/26\",\r\n  \"cvc\": \"123\",\r\n  \"remember_card\": \"on\",\r\n  \"remote_ip\": \"8.8.8.8\",\r\n  \"user_agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36\",\r\n  \"accept_header\": \"text/html\",\r\n  \"language\": \"en-US\",\r\n  \"java_enabled\": false,\r\n  \"javascript_enabled\": true,\r\n  \"color_depth\": 24,\r\n  \"utc_offset\": 0,\r\n  \"screen_width\": 1920,\r\n  \"screen_height\": 1080\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://payments.xpay.com/p/61fc27e7-f5f8-4d70-a77e-1b864155d2fb/?s2s=true",
					"protocol": "https",
					"host": [
						"payments",
						"xpay",
						"com"
					],
					"path": [
						"p",
						"61fc27e7-f5f8-4d70-a77e-1b864155d2fb",
						""
					],
					"query": [
						{
							"key": "s2s",
							"value": "true"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}