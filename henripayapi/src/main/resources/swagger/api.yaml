openapi: 3.0.0
info:
  title: Public REST API
  version: v1
  description: >
    All the endpoints below have a prefix of `https://gate.henripay.com/api/v1/`
    (e.g. `POST https://gate.henripay.com/api/v1/purchases/`).


    You will need your API key that you can obtain in the Developers section in
    your account. Please use this key as a bearer token in the Authorization
    header included in every request: `Authorization: Bearer <secret key>`.


    Before starting the development, we recommend checking out the list of
    ready-to-go connectors to the popular platforms we’ve already built for you.
    It might save you some precious time if you use one of these to develop your
    project.


    Plugins:
    [WooCommerce](https://gate.henripay.com/apis/plugins/WooCommerce%20v3.5+),
    [OpenCart](https://gate.henripay.com/apis/plugins/OpenCart%20v3.0+),
    [Magento](https://gate.henripay.com/apis/plugins/Magento%20v2.0+),
    [PrestaShop](https://gate.henripay.com/apis/plugins/PrestaShop%20v1.7+)




    Libraries: [PHP](https://gate.henripay.com/apis/libraries/PHP),
    [Java](https://gate.henripay.com/apis/libraries/Java),
    [C#](https://gate.henripay.com/apis/libraries/C%23),
    [Node.js](https://gate.henripay.com/apis/libraries/Node.js)


    SDKs: [iOS](https://gate.henripay.com/apis/sdks/iOS),
    [Android](https://gate.henripay.com/apis/sdks/Android)

    ***


    # Online Purchases


    ## Prebuilt payment flow — Redirect


    Redirect integration allows running payments using the prebuilt payment
    flow.


    To accept payments in your application or website via redirect, use `POST
    /purchases/` request to create the `Purchase` and receive the
    `checkout_url`. Redirect the customer to the `checkout_url` to enter their
    card details for processing. After the payment is processed, the system will
    redirect the customer back to your website (take note of `success_redirect`,
    `failure_redirect`).


    *You have three options to check payment status:*


    1. Use `success_callback` parameter of the `Purchase` object.


    2. Use `GET /purchases/<purchase_id>/` request.


    3. Set up a Webhook using the Developers section of your account or use
    Webhook API to listen to `purchase.paid`, or `purchase.payment_failure`
    event on your server.


    Setting the `skip_capture` flag to `true` allows you to separate the
    authentication and payment execution steps, allowing you to reserve funds on
    the customer's card account for some time.


    This flag can also enable preauthorization capability, allowing you to save
    the card without a financial transaction, if possible.


    If the customer agrees to store his card for future purchases, there will be
    an option to pay with a single click next time. To enable this, create a
    `Client` object for each of your clients and provide `client_id` parameter
    value in your Purchase creation requests.


    To create a Purchase or a BillingTemplate, you must specify the `Brand ID`
    and `API key`. You can find both in the Developers section of your account.




    ## Custom payment flow — Direct Post


    Direct post integration allows running payments through the custom payment
    flow.


    To accept payments in your application or website, use `POST /purchases/`
    request to create a `Purchase`.


    To capture customers card details use an HTML `<form>` hosted on your
    website with `method="POST"` and `action` pointing to the `direct_post_url`
    of the transaction.


    You will also need to fill the form with `<input>`'s for the fields with
    card details. As a result, when a customer submits their card details, it
    will be posted straight to our system, allowing you to customize the
    checkout as you wish. At the same time, your PCI DSS requirement is only
    raised to Self-Assessment Questionnaire (SAQ A-EP), as your system doesn't
    receive or process card data.


    For more details, see the documentation on Purchase's `direct_post_url`
    field.


    ### Tokenization & recurring payments


    You can store card tokens and charge the respective cards without user
    interaction if the payment channel supports tokenization.


    When you pass `remember_card=on` to `direct_post_url`, the respective
    `Purchase`'s ID will serve as a card token. This initial `Purchase` will
    have the `is_recurring_token` field set to `true`.


    To charge the tokenized card once again, create a new Purchase and then call
    the `POST /purchases/{new_purchase_id}/charge/`. In the request body,
    provide `"recurring_token": "initial_purchase_id"`. When the request
    succeeds (response code `200`), the new Purchase will become paid. The token
    will be persisted in the Purchase's recurring_token field.


    Use `"recurring_token": "initial_purchase_id"` in all the upcoming `POST
    /purchases/{new_purchase_id}/charge/` requests.


    If you wish to delete the recurring token stored for the initial `Purchase`,
    use the `POST /purchases/{initial_purhcase_id}/delete_recurring_token/`
    request. Its `is_recurring_token` will reset to `false`. 


    ## Custom payment flow — Server-to-Server


    Server-to-Server ("S2S") integration allows running payments on the server
    level without direct interaction between the client’s browser or application
    and API.


    You can build an integration that prevents payers from accessing platform
    resources directly. In this flow, 3D Secure implementation allows API
    clients to:


    Check 3D Secure enrolment, and if the card is enrolled, receive ACS URL
    together with all the necessary params for redirection to ACS (PaReq, MD);

    Redirect the payer to the ACS system of their issuer bank;

    Receive the payer back and execute the authorization with a separate
    request.


    If the card is not enrolled in 3D Secure, authorization will execute
    synchronously.


    Please note that 3DSv2 which is now the industry standard is fully supported
    by the S2S flow. While PaReq/PaRes below are 3DSv1 parameters (replaced by
    creq/cres in 3DSv2 challenge), in case of 3DSv2 proxy ACS solution (where
    the system is accepting the cardholder navigation using 3DSv1 flow and is
    performing all parts of 3DSv2 verification and challenge on behalf of
    merchant) is implemented to maintain API compatibility for older
    integrations.


    To accept payments in your application or website via S2S:


    1.  Ensure the Purchase is created as described in Custom payment flow —
    Direct Post. As per the Purchase's direct_post_url field description, you
    will need to ensure all the necessary criteria are met, including
    success_redirect/failure_redirect fields defined for Purchase and set to
    arbitrary valid URLs (they will not receive any redirects in the S2S
    scenario);

    2.  Implement the following request in your server code, appending
    "?s2s=true" to direct_post_url to form the resulting endpoint (you can
    obtain the S2S token value from your account manager):

            POST {direct_post_url}?s2s=true

        Specify the following headers:

            Content-Type: application/json
            Authorization: Bearer {S2S token}

        In the request body, provide the following data in JSON (you can omit some of the fields, then system will use default values; We recommend providing correct values from the user’s browser as it can affect 3D Secure success rate):

            {
              "cardholder_name": "John Doe",
              "card_number": "4444333322221111",
              "expires": "01/23",
              "cvc": "123",
              "remember_card": "on",
              "remote_ip": "8.8.8.8",
              "user_agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36",
              "accept_header": "text/html",
              "language": "en-US",
              "java_enabled": false,
              "javascript_enabled": true,
              "color_depth": 24,
              "utc_offset": 0,
              "screen_width": 1920,
              "screen_height": 1080
            }

        |Field name&nbsp;|Required&nbsp;|Validation criteria/remarks&nbsp;|Default value|
        |--- |--- |---|--- |
        |cardholder_name|Y|Latin letters only (space and apostrophe ('), dot (.), dash (-) symbols are also allowed), max 30 characters||
        |card_number|Y|text, digits only, no whitespace, max 19 characters||
        |expires|Y|text in 'MM/YY' format, digits and a slash only (/^\\d{2}\\/\\d{2}$/), max 5 characters||
        |cvc|Y|numeric string of 3 or 4 digits||
        |remember_card|N|literal value "on" to save card, any other string otherwise||
        |remote_ip|Y|external IP of payer’s browser in IPv4 or IPv6 format||
        |user_agent|N|User-Agent as sent by the payer’s browser, max 2048 charge|Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/ 537.36 (KHTML, like Gecko) Chrome/ 88.0.4324.96 Safari/ 537.36|
        |accept_header|N|Same as above, max 2048 characters|text/html|
        |language|N|Same as above, max 8 characters|en-US|
        |java_enabled|N|boolean|false|
        |javascript_enabled|N|boolean|true|
        |color_depth|N|integer in 0-255 range|24|
        |utc_offset|N|integer in -32,768 to 32,767 range|0|
        |screen_width|N|integer in uint64 range|1920|
        |screen_height|N|integer in uint64 range|1080|

    3.  If the card is not enrolled in 3S Secure, then a response will contain
    the field "status" with one of the following values:

    "executed" in case of a successful payment authorization;

    "authorized" in case fund reservation using Purchase.skip_capture was
    requested;

    "error" in case of an authorization error.

        Example:

            {"status": "executed"}

        You will receive "executed" or "authorized" statuses with a response status code 200 and "error" status - with a status code of 400.

        In all of those cases, it is necessary to set up webhooks for purchase events (`purchase.paid, purchase.payment_failure` at least) to receive further information about the status of the financial transaction.

    4.  If the card is enrolled in 3D Secure, the response will have a status
    code of 200, the status will be 3DS_required, and the response will contain
    additional fields:

            {
              "status": "3DS_required",
              "Method": "(POST|GET)",
              "PaReq": "...",
              "MD": "... (can arrive empty)",
              "URL": "http://url.of.acs.bank/",
              "callback_url": "https://..."
            }

        It’s necessary to ensure your client’s browser makes a request with the method specified in `Method` (GET or POST only) to the ACS of issuer bank returned in "URL", including the values of `MD` and `PaReq` as received (use query params in case of GET and request body params in case of POST). Be aware that MD might arrive empty – in that case, you can send it further as an empty string.

        In addition to those, you also **need to include the `TermUrl` parameter** in the client’s browser request, pointing to the URL in your system where the customer’s navigation will be expected. Once the payer approves the transaction, he will be redirected using the POST method to that URL with `MD` and `PaRes` params in the request body.

    5.  Once the client is back to `TermUrl` in your system and you have
    received the `MD` and `PaRes`, it’s needed to transmit them to the platform
    to complete the authorization. Send the following request from your server
    code (no auth headers required):

            POST {callback_url from step 4.}

            Content-Type: application/x-www-form-urlencoded
            MD={MD received, if any}&PaRes={PaRes received}

        The response will contain the authorization status in JSON format and will be identical to the format described in the previous section.

    ## Testing Integration


    It’s possible to test-drive all checkouts using a test Purchase.


    For a successful payment, you can use the following card numbers:


    *   4444 3333 2222 1111 - non-3D Secure card

    *   5555 5555 5555 4444 - 3D Secure card


    For both cards, please use:


    *   any cardholder name

    *   any expiry larger or equal to the current month/year

    *   CVC = 123


    For a failed payment, please change the CVC or expiration date.


    When using a 3D Secure enrolled card in S2S checkout,  an incorrect CVC will
    trigger an authorization failure on the S2S callback step (after the
    customer returns from test ACS). Using a wrong expiry date emulates data
    validation failure and results in immediate error before that step.



    ***


    # Billing


    ## Invoicing


    To send one-off invoices, use `POST /billing/` request. It's similar to
    `POST /purchases/` except that customers are an array, allowing you to
    bulk-issue invoices to several customers at once.


    To send invoices using a template, use a separate `POST /billing_templates/`
    request (without `clients`!). Then, for each of your clients, use `POST
    /billing_templates/{billing_template_id}/send_invoice/`.


    If the customer agrees to store his card for future purchases, then the next
    time the option to pay with a single click will appear if the payment
    channel supports tokenization.


    ***


    ## Subscriptions


    Subscriptions allow you to automate recurring purchases. You can create a
    subscription using the same request `POST /billing_templates/` as for
    invoices. To create a subscription billing template, specify
    `is_subscription: true` and `subscription_*` fields in `POST
    /billing_templates/` request body. Then, add subscribers using the `POST
    /billing_templates/<billing_template_id>/add_subscriber/` request.


    If the payment channel supports tokenization and the customer agreed to
    store his datafor future purchases, payments will be processed
    automatically, while the customer will get a receipt for each purchase. Note
    that whenever a subscription payment fails, your customer will automatically
    receive an invoice he can pay (and store a new card for upcoming payments in
    the process). Your system will also receive the
    `purchase.subscription_charge_failure` webhook event, if configured.


    By default, the system generates invoices and processes subscription
    payments at the beginning of the billing cycle.


    If you want to send an invoice or charge a customer at the end of the
    billing cycle, just set `subscription_charge_period_end` to `true` in `POST
    /billing_templates/` request.


    The API also provides you with an option to give a trial to your customers
    before enabling paid subscription period. To do that just set
    `subscription_trial_periods` in `POST /billing_templates/` request.


    ***


    # Callbacks


    Two methods for defining asynchronous callbacks are supported - `Purchase`
    success callbacks and webhooks.


    ## Purchase success callbacks


    `Purchase` success callbacks are defined by providing a target URL in the
    `success_callback` field on `Purchase` creation (see [POST
    /purchases/](#/Purchases/purchases_create)). The system will generate a
    callback when:

    * a `Purchase` with `skip_capture=false` is successfully paid;

    * a `Purchase` with `skip_capture=true` is successfully captured (see [POST
    /purchases/{id}/capture/](#/Purchases/purchases_capture));

    * a `Purchase` is successfully paid using a recurring token (see [POST
    /purchases/{id}/charge/](#/Purchases/purchases_charge));


    These callbacks pass a JSON-encoded `Purchase` as their payload. The payload
    represents a snapshot of the state of the `Purchase` when the event was
    created. The payload will include an `event_type` field to indicate which
    specific event (see [Event schema](#model-Event)) triggered the callback.


    The payload is signed using a company-wide key pair. You can obtain the
    public key with `GET /public_key/`. See the `Authentication` section below
    for more details.


    ## Webhooks


    For creating and modifying webhooks, see the Webhook [CRUD API
    specification](#operations-tag-Webhooks).


    `Webhook` callback payloads are signed using a dedicated key pair. You can
    obtain the public key from `Webhook.public_key`. See the
    [Authentication](#callback-auth) section below for more details.


    ## Delivery protocol


    When a callback is not successfully delivered (received by the target server
    and responded to with a 200 series HTTP response code), the system will make
    up to 8 additional attempts at exponentially increasing intervals between
    attempts. No further delivery attempts will be made if the callback is not
    successfully delivered 36 hours after triggering.


    Please note that due to the asynchronous nature of network requests, it is
    possible for a callback delivery confirmation (HTTP response with a 200
    series status code) to not properly arrive from the callback's target
    server. Therefore it is possible in case of severe network faults for the
    target server to receive a callback, respond to it with a 200 series HTTP
    status code and then receive the same callback after an interval.


    Callback deliveries are guaranteed to be sequential to events triggered on
    their source objects. For example, when registering webhooks for both the
    `purchase.created` and `purchase.paid` events, there will be no
    `purchase.paid` callbacks for this `Purchase` until all `purchase.created`
    callbacks for this `Purchase` are successfully delivered.


    ## <b id="callback-auth">Authentication</b>


    Payloads are signed using asymmetric A.K.A. public-key cryptography to
    guarantee the authenticity of delivered callbacks. Each callback delivery
    request includes an X-Signature header field. This field contains a
    base64-encoded RSA PKCS#1 v1.5 signature of the SHA256 digest of the request
    body buffer.


    You can obtain the public key for `Webhook` authentication from
    `Webhook.public_key` of the corresponding `Webhook`.


    You can obtain the public key for success callback authentication from [GET
    /public_key/](#operations-Public_Key-public_key).


    Please note the provider is not responsible for any financial losses
    incurred due to not implementing payload signature verification.

servers:
  - url: /api/v1

paths:
  /purchases/:
    post:
      operationId: purchases_create
      responses:
        '201':
          $ref: '#/components/responses/Purchase'
        '400':
          $ref: '#/components/responses/400'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Purchase'
            example:
              client:
                email: test@test.com
              purchase:
                products:
                  - name: test
                    price: 100
              brand_id: 409eb80e-3782-4b1d-afa8-b779759266a5
      summary: Create a purchase – the main request for any e-commerce integration.

      tags:
        - Purchases
  /purchases/{id}/:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: purchases_read
      responses:
        '200':
          $ref: '#/components/responses/Purchase'
        '404':
          $ref: '#/components/responses/404'
      summary: Retrieve an object by ID.
      tags:
        - Purchases
  /purchases/{id}/cancel/:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      operationId: purchases_cancel
      responses:
        '200':
          $ref: '#/components/responses/Purchase'
        '404':
          $ref: '#/components/responses/404'
      summary: Cancel a pending purchase.
      description: >-
        If you have a Purchase that payment is possible for, using this request
        you can guarantee that it won't be paid.
      tags:
        - Purchases
  /purchases/{id}/release/:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      operationId: purchases_release
      responses:
        '200':
          $ref: '#/components/responses/Purchase'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      summary: Release funds on hold.

      tags:
        - Purchases
  /purchases/{id}/capture/:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      operationId: purchases_capture
      requestBody:
        required: false
        content:
          application/json:
            schema:
              properties:
                amount:
                  type: integer
                  description: >-
                    Amount to be captured. Used to perform partial captures.
                    Remainder will be automatically released.
      responses:
        '200':
          $ref: '#/components/responses/Purchase'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      summary: Capture a previously authorized payment.
      tags:
        - Purchases
  /purchases/{id}/charge/:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      operationId: purchases_charge
      responses:
        '200':
          $ref: '#/components/responses/Purchase'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                recurring_token:
                  type: string
                  format: uuid
                  description: >-
                    ID of a recurring token (Purchase having `is_recurring_token
                    == true`) to use.
            example:
              recurring_token: ea582899-78ec-4c3a-9cb3-08f922e556b6
      summary: Charge a purchase using a saved token.

      tags:
        - Purchases
  /purchases/{id}/delete_recurring_token/:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      operationId: purchases_delete_recurring_token
      responses:
        '200':
          $ref: '#/components/responses/Purchase'
        '404':
          $ref: '#/components/responses/404'
      summary: Delete a recurring token associated with a purchase.

      tags:
        - Purchases
  /purchases/{id}/refund/:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      operationId: purchases_refund
      responses:
        '200':
          $ref: '#/components/responses/Payment'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              properties:
                amount:
                  type: integer
                  description: >-
                    Amount to refund in minor units of the purchase's currency -
                    e.g. `100` for €1.00. Should not be more than
                    `Purchase.refundable_amount`. 


                    Optional; if not provided, a full refund will be executed.
                    See the description for `Purchase.refund_availability`
                    field.
            example:
              amount: 120
      summary: Refund a paid purchase.

      tags:
        - Purchases
  /purchases/{id}/mark_as_paid/:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      operationId: purchases_mark_as_paid
      responses:
        '200':
          $ref: '#/components/responses/Purchase'
        '404':
          $ref: '#/components/responses/404'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              properties:
                paid_on:
                  type: number
                  description: >-
                    UTC timestamp at which this purchase was paid. Current time
                    will be used if omitted.
            example:
              paid_on: 1635162311
      summary: Mark a purchase as paid.

      tags:
        - Purchases
  /purchases/{id}/resend_invoice/:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      operationId: purchases_resend_invoice
      responses:
        '200':
          $ref: '#/components/responses/Purchase'
        '404':
          $ref: '#/components/responses/404'
      summary: Re-sends invoice
      description: Will re-send the invoice.
      tags:
        - Purchases
  /payment_methods/:
    get:
      operationId: payment_methods
      summary: Get the list of payment methods available for your purchase.
      parameters:
        - name: brand_id
          in: query
          description: >-
            Which brand would you like to lookup the available payment methods
            for. Use the same value (UUID) you'd set the `Purchase.brand_id` to.
          required: true
          schema:
            type: string
        - name: currency
          in: query
          description: Currency you'd use in your Purchase in ISO 4217 format, e.g. `EUR`.
          required: true
          schema:
            type: string
        - name: country
          in: query
          description: Country code in the ISO 3166-1 alpha-2 format (e.g. `GB`). Optional.
          schema:
            type: string
        - name: recurring
          in: query
          description: >-
            If provided in the format of `recurring=true`, will filter out the
            methods that don't support recurring charges (see `POST
            /purchases/{id}/charge/`).
          schema:
            type: boolean
        - name: skip_capture
          in: query
          description: >-
            If provided in the format of `skip_capture=true`, will filter out
            the methods that don't support `skip_capture` functionality (see the
            description for `Purchase.skip_capture field`).
          schema:
            type: boolean
        - name: preauthorization
          in: query
          description: >-
            If provided in the format of `preauthorization=true`, will filter
            out the methods that don't support preauthorization functionality
            (see the description for `Purchase.skip_capture field`).
          schema:
            type: boolean
        - name: language
          in: query
          description: Language code in the ISO 639-1 format (e.g. 'en'). Optional.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  available_payment_methods:
                    type: array
                    items:
                      type: string
                      description: Name of the payment method, e.g. `visa`.
                  by_country:
                    type: object
                    description: >-
                      Payment method names (as returned by
                      `available_payment_methods`) grouped by country codes they
                      are available in. `any` key returns names of payment
                      method available in all countries.
                    properties:
                      any:
                        type: array
                        items:
                          type: string
                          description: Name of the payment method, e.g. `visa`.
                    additionalProperties:
                      type: array
                      items:
                        type: string
                        description: Name of the payment method, e.g. `visa`.
                  country_names:
                    type: object
                    description: >-
                      Human-readable names corresponding to country codes as
                      returned by `by_country` property. `any` code is also
                      decoded to `Other`.
                    additionalProperties:
                      type: string
                      description: Human-readable name of the country.
                  names:
                    type: object
                    description: >-
                      Human-readable names of payment methods as returned by
                      `available_payment_methods` property.
                    additionalProperties:
                      type: string
                      description: Human-readable name of the payment method.
                  logos:
                    type: object
                    description: >-
                      Mapping of payment method names to respective logo file
                      paths (relative to the hostname of API host). Some methods
                      can be displayed as an array of logos.
                    additionalProperties:
                      oneOf:
                        - type: string
                          description: >-
                            Path to the payment method logo file relative to API
                            host.
                        - type: array
                          items:
                            type: string
                            description: >-
                              Path to the payment method logo file relative to
                              API host.
                  card_methods:
                    type: array
                    items:
                      type: string
                      description: >-
                        Names of the card methods listed in
                        `available_payment_methods` property. All of these are
                        grouped under `card` in other properties like
                        `by_country`.
                example:
                  available_payment_methods:
                    - visa
                    - mastercard
                    - some_method
                  by_country:
                    any:
                      - card
                    GB:
                      - some_method
                  country_names:
                    any: Other
                    GB: United Kingdom
                  names:
                    visa: Visa
                    mastercard: Mastercard
                    some_method: Some method
                  logos:
                    some_method:
                      - /static/images/icon-visa.svg
                      - /static/images/icon-mastercard.svg
                      - /static/images/icon-maestro.svg
                    visa: /static/images/icon-visa.svg
                    mastercard: /static/images/icon-mastercard.svg
                  card_methods:
                    - american_express
                    - visa
        '400':
          $ref: '#/components/responses/400'
      tags:
        - Payment methods
  /mandate/:
    post:
      summary: create a new mandate
      description: used for Sepa DD to create a new mandate for a merchant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mandateinformation'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: the mandate IDs created.
                type: array
                items:
                  $ref: '#/components/schemas/Id'
        '400':
          $ref: '#/components/responses/400'



  /mandate/{id}:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      summary: Retrieve mandate information
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: Description of mandate ID
                type: array
                items:
                  $ref: '#/components/schemas/mandateinformation'
        '404':
          $ref: '#/components/responses/404'


  /collection/:
    post:
      summary: create a new mandate
      description: used for Sepa DD to create a new mandate for a merchant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/collectioninformation'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: the collection IDs created.
                type: array
                items:
                  $ref: '#/components/schemas/Id'
        '400':
          $ref: '#/components/responses/400'



  /collection/{id}:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      summary: Retrieve sepadd collection information
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: Description of transaction ID
                type: array
                items:
                  $ref: '#/components/schemas/collectioninformation'
        '404':
          $ref: '#/components/responses/404'



  /billing/:
    post:
      operationId: billing_templates_one_time_invoices
      summary: Send an invoice to one or several clients.

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: A list of Purchase IDs created.
                type: array
                items:
                  $ref: '#/components/schemas/Id'
                example:
                  - 720e2c96-ef94-4baa-90b6-d61ef6fd675a
        '400':
          $ref: '#/components/responses/400'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - required:
                    - clients
                  properties:
                    clients:
                      type: array
                      items:
                        $ref: '#/components/schemas/BillingTemplateClient'
                - $ref: '#/components/schemas/BillingTemplate'
      tags:
        - Billing
  /billing_templates/:
    post:
      operationId: billing_templates_create
      summary: >-
        Create a template to issue repeated invoices from in the future, with or
        without a subscription.

      responses:
        '201':
          $ref: '#/components/responses/BillingTemplate'
        '400':
          $ref: '#/components/responses/400'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingTemplate'
      tags:
        - Billing
    get:
      operationId: billing_templates_list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/BillingTemplate'
                  next:
                    nullable: true
                    type: string
                    description: >-
                      The next page of pagination results. `null` if there are
                      no more results.
                  previous:
                    nullable: true
                    type: string
                    description: >-
                      The previous page of pagination results. `null` if there
                      was no previous page.
      summary: List all billing templates.
      tags:
        - Billing
  /billing_templates/{id}/:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: billing_templates_read
      responses:
        '200':
          $ref: '#/components/responses/BillingTemplate'
        '404':
          $ref: '#/components/responses/404'
      summary: Retrieve a billing template by ID.
      tags:
        - Billing
    put:
      operationId: billing_templates_update
      responses:
        '200':
          $ref: '#/components/responses/BillingTemplate'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingTemplate'
      summary: Update a billing template by ID.
      tags:
        - Billing
    delete:
      operationId: billing_templates_delete
      responses:
        '204':
          description: OK
      summary: Delete a billing template by ID.
      tags:
        - Billing
  /billing_templates/{id}/send_invoice/:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      operationId: billing_templates_send_invoice
      summary: Send an invoice, generating a purchase from billing template data.

      responses:
        '200':
          $ref: '#/components/responses/Purchase'
        '400':
          $ref: '#/components/responses/400'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingTemplateClient'
            example:
              client_id: b79d3df6-2f69-4426-acee-eda049d83e18
      tags:
        - Billing
  /billing_templates/{id}/add_subscriber/:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      operationId: billing_templates_add_subscriber
      summary: >-
        Add a billing template client and activate recurring billing
        (is_subscription: true).

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  billing_template_client:
                    $ref: '#/components/schemas/BillingTemplateClient'
                  purchase:
                    description: >-
                      Nullable in `POST /billing_templates/{id}/add_subscriber/`
                      response.
                    allOf:
                      - $ref: '#/components/schemas/Purchase'
        '400':
          $ref: '#/components/responses/400'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingTemplateClient'
            example:
              client_id: b79d3df6-2f69-4426-acee-eda049d83e18
      tags:
        - Billing
  /billing_templates/{id}/clients/:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: billing_templates_clients_list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/BillingTemplateClient'
                  next:
                    nullable: true
                    type: string

                  previous:
                    nullable: true
                    type: string

      summary: List all billing template clients for this billing template.
      tags:
        - Billing
  /billing_templates/{id}/clients/{id_c}/:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: billing_templates_clients_read
      responses:
        '200':
          $ref: '#/components/responses/BillingTemplateClient'
        '404':
          $ref: '#/components/responses/404'
      parameters:
        - $ref: '#/components/parameters/id'
      summary: Retrieve a billing template client by clients ID.
      tags:
        - Billing
    patch:
      operationId: billing_templates_clients_partial_update
      responses:
        '200':
          $ref: '#/components/responses/BillingTemplateClient'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingTemplateClient'
            example:
              status: active
      summary: Partially update a billing template client by clients ID.
      tags:
        - Billing
  /clients/:
    post:
      operationId: clients_create
      responses:
        '201':
          $ref: '#/components/responses/Client'
        '400':
          $ref: '#/components/responses/400'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      summary: Create a new client.
      tags:
        - Clients
    get:
      operationId: clients_list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Client'
                  next:
                    nullable: true
                    type: string

                  previous:
                    nullable: true
                    type: string

      summary: List all clients.
      tags:
        - Clients
  /clients/{id}/:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: clients_read
      responses:
        '200':
          $ref: '#/components/responses/Client'
        '404':
          $ref: '#/components/responses/404'
      summary: Retrieve an object by ID.
      tags:
        - Clients
    put:
      operationId: clients_update
      responses:
        '200':
          $ref: '#/components/responses/Client'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      summary: Update a client by ID.
      tags:
        - Clients
    patch:
      operationId: clients_partial_update
      responses:
        '200':
          $ref: '#/components/responses/Client'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      summary: Partially update a client by ID.
      tags:
        - Clients
    delete:
      operationId: clients_delete
      responses:
        '204':
          description: OK
      summary: Delete a client by ID.
      tags:
        - Clients
  /clients/{id}/recurring_tokens/:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: client_recurring_tokens_list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/ClientRecurringToken'
                  next:
                    nullable: true
                    type: string

                  previous:
                    nullable: true
                    type: string

      summary: List recurring tokens saved for a client.

      tags:
        - Clients
  /clients/{id}/recurring_tokens/{id_rt}/:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: client_recurring_tokens_read
      responses:
        '200':
          $ref: '#/components/responses/ClientRecurringToken'
        '404':
          $ref: '#/components/responses/404'
      summary: Retrieve an object by ID.
      tags:
        - Clients
    delete:
      operationId: client_recurring_tokens_delete
      responses:
        '204':
          description: OK
      summary: Delete a client recurring token by ID.

      tags:
        - Clients
  /webhooks/:
    post:
      operationId: webhooks_create
      responses:
        '201':
          $ref: '#/components/responses/Webhook'
        '400':
          $ref: '#/components/responses/400'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
      summary: Create a new webhook.
      tags:
        - Webhooks
    get:
      operationId: webhooks_list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Webhook'
                  next:
                    nullable: true
                    type: string

                  previous:
                    nullable: true
                    type: string

      summary: List all webhooks.
      tags:
        - Webhooks
  /webhooks/{id}/:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: webhooks_read
      responses:
        '200':
          $ref: '#/components/responses/Webhook'
        '404':
          $ref: '#/components/responses/404'
      summary: Retrieve an object by ID.
      tags:
        - Webhooks
    put:
      operationId: webhooks_update
      responses:
        '200':
          $ref: '#/components/responses/Webhook'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
      summary: Update a webhook by ID.
      tags:
        - Webhooks
    patch:
      operationId: webhooks_partial_update
      responses:
        '200':
          $ref: '#/components/responses/Webhook'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
      summary: Partially update a webhook by ID.
      tags:
        - Webhooks
    delete:
      operationId: webhooks_delete
      responses:
        '204':
          description: OK
      summary: Delete a webhook by ID.
      tags:
        - Webhooks
  /public_key/:
    get:
      description: Returns public key for authenticating company callback payloads
      summary: Get a callback public key.
      parameters: [ ]
      operationId: public_key
      responses:
        '200':
          description: Public key for authenticating callback payloads
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicKey'
      tags:
        - Public Key
  /account/json/balance/:
    get:
      parameters:
        - $ref: '#/components/parameters/tokenized'
        - in: query
          name: from
          description: Retrieve a past balance value at a specific Unix timestamp
          schema:
            type: integer
        - $ref: '#/components/parameters/brand'
        - $ref: '#/components/parameters/terminal_uid'
        - $ref: '#/components/parameters/currency'
        - $ref: '#/components/parameters/payment_method'
        - $ref: '#/components/parameters/product'
        - $ref: '#/components/parameters/flow'
        - $ref: '#/components/parameters/country'
      operationId: balance
      responses:
        '200':
          description: Company balance successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceByCurrency'
        '400':
          $ref: '#/components/responses/400'
      summary: Get company balance.
      description: >-
        Returns the company balance according to the provided query string
        filters. Multiple values can be provided for all filters except from
        and to, including all results matching any of these values.
      tags:
        - Account
  /account/json/turnover/:
    get:
      parameters:
        - $ref: '#/components/parameters/tokenized'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/brand'
        - $ref: '#/components/parameters/terminal_uid'
        - $ref: '#/components/parameters/currency'
        - $ref: '#/components/parameters/payment_method'
        - $ref: '#/components/parameters/product'
        - $ref: '#/components/parameters/flow'
        - $ref: '#/components/parameters/country'
      operationId: turnover
      responses:
        '200':
          description: Company turnover successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TurnoverPair'
        '400':
          $ref: '#/components/responses/400'
      summary: Get company turnover.

      tags:
        - Account
  /company_statements/:
    post:
      operationId: company_statements_create
      summary: Schedule a statement generation.
      parameters:
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/paid_from'
        - $ref: '#/components/parameters/paid_to'
        - $ref: '#/components/parameters/updated_from'
        - $ref: '#/components/parameters/updated_to'
        - $ref: '#/components/parameters/brand_id'
        - $ref: '#/components/parameters/shop_id'
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/products'
        - $ref: '#/components/parameters/total'
        - $ref: '#/components/parameters/currency'
        - $ref: '#/components/parameters/payment_method'
        - $ref: '#/components/parameters/three_d_secure'
        - $ref: '#/components/parameters/country'
        - $ref: '#/components/parameters/status'
        - $ref: '#/components/parameters/product'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyStatement'
        '400':
          $ref: '#/components/responses/400'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyStatement'
            example:
              format: csv
              timezone: UTC
      tags:
        - Company Statements
    get:
      operationId: company_statements_list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/CompanyStatement'
                  next:
                    nullable: true
                    type: string
                    description: >-
                      The next page of pagination results. `null` if there are
                      no more results.
                  previous:
                    nullable: true
                    type: string

      summary: List all generated statements.
      tags:
        - Company Statements
  /company_statements/{id}/:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: company_statements_read
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyStatement'
        '404':
          $ref: '#/components/responses/404'
      summary: Retrieve a statement by ID.
      tags:
        - Company Statements
  /company_statements/{id}/cancel/:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      operationId: company_statements_cancel
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyStatement'
        '404':
          $ref: '#/components/responses/404'
      summary: Cancel a statement generation by ID.
      tags:
        - Company Statements
components:
  parameters:
    id:
      name: id
      required: true
      in: path
      description: Object ID (UUID)
      schema:
        type: string
        format: uuid
    tokenized:
      in: query
      name: tokenized
      schema:
        type: boolean
    from:
      in: query
      name: from
      description: >-
        Filter result set to only include values older or equal to the provided
        Unix timestamp
      schema:
        type: integer
    paid_from:
      in: query
      name: paid_from
      description: >-
        Filter paid result set to only include values older or equal to the
        provided Unix timestamp
      schema:
        type: integer
    paid_to:
      in: query
      name: paid_to
      description: >-
        Filter paid result set to only include values younger than the provided
        Unix timestamp
      schema:
        type: integer
    updated_to:
      in: query
      name: updated_to
      description: >-
        Filter result set to only include values younger than the provided last
        modification time Unix timestamp
      schema:
        type: integer
    updated_from:
      in: query
      name: updated_from
      description: >-
        Filter result set to only include values older or equal to the provided
        last modification time Unix timestamp
      schema:
        type: integer
    brand_id:
      in: query
      name: brand_id
      description: Filter result set to only include the specified brand UUID(s)
      schema:
        type: string
        format: uuid
    shop_id:
      in: query
      name: shop_id
      description: Filter result set to only include the specified shop UUID(s)
      schema:
        type: string
        format: uuid
    q:
      in: query
      name: q
      description: >-
        Filter result set to only include results including a specified text
        (search over a ton of text fields)
      schema:
        type: string
        format: string
    products:
      in: query
      name: products
      description: >-
        Filter result set to only include results including a specified text in
        products
      schema:
        type: string
        format: string
    total:
      in: query
      name: total

      schema:
        type: number
        format: float
    three_d_secure:
      in: query
      name: three_d_secure
      description: Filter result set to only include results with a 3-D verification.
      schema:
        type: string
        format: bool
    status:
      in: query
      name: status

      schema:
        type: string
        format: string
    to:
      in: query
      name: to
      description: >-
        Filter result set to only include values younger than the provided Unix
        timestamp
      schema:
        type: integer
    brand:
      in: query
      name: brand
      description: Filter result set to only include the specified brand UUID(s)
      schema:
        type: string
        format: uuid
    terminal_uid:
      in: query
      name: terminal_uid
      description: Filter result set to only include the specified terminal UUID(s)
      schema:
        type: string
        format: uuid
    currency:
      in: query
      name: currency
      description: Filter result set to only include specified currency(ies)
      schema:
        type: string
    payment_method:
      in: query
      name: payment_method
      description: >-
        Filter result set to only include specified payment methods(s). See <a
        href="#model-PaymentMethod">PaymentMethod<a> fro more information.
      schema:
        $ref: '#/components/schemas/PaymentMethod'
    product:
      in: query
      name: product
      description: >-
        Filter result set to only include specified products(s). See <a
        href="#model-TransactionProduct">TransactionProduct<a> fro more
        information.
      schema:
        $ref: '#/components/schemas/TransactionProduct'
    flow:
      in: query
      name: flow
      description: >-
        Filter result set to only include specified transaction creation or
        execution flow(s). See <a
        href="#model-TransactionFlow">TransactionFlow<a> fro more information.
      schema:
        $ref: '#/components/schemas/TransactionFlow'
    country:
      in: query
      name: country
      description: >-
        Filter result set to only include specified client country(ies) in ISO
        3166-1 alpha-2 format
      schema:
        type: string
        format: ISO 3166-1 alpha-2
    banking_account:
      in: query
      name: banking_account
      description: Filter result set to only include specified banking account UUID(s)
      schema:
        type: string
        format: uuid
  responses:
    '400':
      description: Invalid data submitted or request processing error
      content:
        application/json:
          schema:
            type: object

    '404':
      description: No such object
    BillingTemplateClient:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BillingTemplateClient'
    BillingTemplate:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BillingTemplate'
    Purchase:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Purchase'
    Payout:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Payout'
    Payment:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Payment'
    Client:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Client'
    ClientRecurringToken:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClientRecurringToken'
    Webhook:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Webhook'
  schemas:
    Id:
      type: string
      maxLength: 36
      description: UUID
    Balance:
      type: object
      description: Company Balance in a specific currency
      properties:
        gross_balance:
          allOf:
            - $ref: '#/components/schemas/MoneyAmount'
            - description: >-
                Raw Company balance without any fees or reserved amounts
                subtracted
        balance:
          allOf:
            - $ref: '#/components/schemas/MoneyAmount'
            - description: Company gross balance with transaction fees subtracted
        available_balance:
          allOf:
            - $ref: '#/components/schemas/MoneyAmount'
            - description: Company balance currently available for withdrawal
        reserved:
          allOf:
            - $ref: '#/components/schemas/MoneyAmount'
            - description: >-
                Amount protected from withdrawal for an amount of time as per
                the brand configuration
        pending_outgoing:
          allOf:
            - $ref: '#/components/schemas/MoneyAmount'
            - description: Amount currently pending withdrawal
        fee_sell:
          $ref: '#/components/schemas/FeeSell'
    BalanceByCurrency:
      type: object
      description: Map of currency to company Balance for the specific currency
      additionalProperties:
        $ref: '#/components/schemas/Balance'
      example:
        EUR:
          balance: 93408
          fee_sell: 0
          reserved: 0
          gross_balance: 93408
          pending_outgoing: 0
          available_balance: 93408
        RUB:
          balance: 1111840
          fee_sell: 360
          reserved: 0
          gross_balance: 1112200
          pending_outgoing: 0
          available_balance: 1111840
        USD:
          balance: -35420
          fee_sell: 1880
          reserved: 0
          gross_balance: -33540
          pending_outgoing: 0
          available_balance: -35420
    BankAccount:
      type: object
      properties:
        bank_account:
          type: string
          maxLength: 34
          description: Bank account number (e.g. IBAN)
        bank_code:
          type: string
          maxLength: 11
          description: SWIFT/BIC code of the bank
    BaseModel:
      type: object
      properties:
        type:
          type: string
          readOnly: true
          description: Object type identifier
        id:
          type: string
          format: uuid
          readOnly: true
        created_on:
          readOnly: true
          description: Object creation time
          allOf:
            - $ref: '#/components/schemas/UnixTimestamp'
        updated_on:
          readOnly: true
          description: Object last modification time
          allOf:
            - $ref: '#/components/schemas/UnixTimestamp'
    BillingTemplate:
      required:
        - purchase
        - is_subscription
      properties:
        purchase:
          $ref: '#/components/schemas/PurchaseDetails'
        company_id:
          type: string
          format: uuid
          readOnly: true
        number_of_billing_cycles:
          type: integer
          description: >-
            Limits number of billing cycles for each client if set to a non-zero
            value
        is_test:
          type: boolean
          readOnly: true
          description: >-
            Indicates this is a test object, created using test API keys or
            using Billing section of UI while in test mode.
        user_id:
          type: string
          format: uuid
          nullable: true
          readOnly: true
          description: >-
            ID of user who has created this object in the Billing UI, if
            applicable.
        brand_id:
          type: string
          format: uuid
          description: >-
            ID of the brand to create this BillingTemplate for. You can copy it
            down in the API section, see the specify the ID of the Brand link
            in answer to How to setup payments on website or in mobile app.
        title:
          type: string
          maxLength: 256
        is_subscription:
          type: boolean


        invoice_issued:
          nullable: true

          allOf:
            - $ref: '#/components/schemas/Timestamp'
        invoice_due:
          nullable: true

          allOf:
            - $ref: '#/components/schemas/UnixTimestamp'
        invoice_skip_capture:
          type: boolean
          default: false

        invoice_send_receipt:
          type: boolean
          default: false

        subscription_period:
          type: integer
          format: int64
          minimum: 1
          maximum: 256
          default: 1
        subscription_period_units:
          description: See `subscription_period`.
          default: months
          allOf:
            - $ref: '#/components/schemas/PeriodUnits'
        subscription_due_period:
          type: integer
          format: int64
          minimum: 1
          maximum: 256
          default: 7
        subscription_due_period_units:
          description: See `subscription_due_period`.
          default: days
          allOf:
            - $ref: '#/components/schemas/PeriodUnits'
        subscription_charge_period_end:
          type: boolean
          default: false
        subscription_trial_periods:
          type: integer
          format: int64
          minimum: 0
          maximum: 256
          default: 0
        subscription_active:
          type: boolean
          default: false
        subscription_has_active_clients:
          type: boolean
          readOnly: true
        force_recurring:
          type: boolean
          default: false
        upsell_campaigns:
          type: array
          items:
            type: string
            format: uuid
          description: Array of IDs of related Upsell campaigns.
        referral_campaign_id:
          type: string
          format: uuid
          nullable: true
          description: ID of Referral campaign.
      allOf:
        - $ref: '#/components/schemas/BaseModel'
    BillingTemplateClient:
      required:
        - client_id
      properties:
        client_id:
          type: string
          format: uuid
          description: >-
            ID of the Client object to add to the BillingTemplate. Read-only
            after the BillingTemplateClient has been created. Note that the same
            Client can be added to a BillingTemplate several times.
        number_of_billing_cycles_passed:
          type: integer
          readOnly: true
          description: >-
            Only used together with number_of_billing_cycles on BillingTemplate.
            Shows number of billing cycles passed when number of cycles is
            limited
        invoice_reference:
          type: string
          maxLength: 128
          nullable: true
          description: >-
            When present overrides reference for invoices generated for this
            client
        status:
          type: string
          default: inactive
          enum:
            - pending
            - inactive
            - active
            - subscription_paused

        subscription_billing_scheduled_on:
          description: >-
            If not null, reports the date when the next billing is scheduled for
            this client.
          readOnly: true
          nullable: true
          default: null
          allOf:
            - $ref: '#/components/schemas/Timestamp'
        payment_method_whitelist:
          type: array
          minItems: 1

          items:
            type: string

        send_invoice_on_charge_failure:
          type: boolean
          default: true
          description: Sends invoice when subscription charge fails if this is `true`
        send_invoice_on_add_subscriber:
          type: boolean
          default: false

        send_receipt:
          type: boolean
          default: true
          description: Sends receipt when subscription charge succeeds if this is `true`
      allOf:
        - $ref: '#/components/schemas/BaseModel'
    City:
      type: string
      maxLength: 128
      description: City name
    Client:
      allOf:
        - $ref: '#/components/schemas/BaseModel'
        - $ref: '#/components/schemas/ClientDetails'
    ClientDetails:
      description: >-
        Contains details about the client of a purchase or payment - the remote
        payer/fund recipient party.
      required:
        - email
      properties:
        email:
          $ref: '#/components/schemas/Email'
        phone:
          $ref: '#/components/schemas/Phone'
        full_name:
          type: string
          maxLength: 128
          description: Name and surname of client
        personal_code:
          type: string
          maxLength: 32
          description: Personal identification code of client
        street_address:
          $ref: '#/components/schemas/StreetAddress'
        country:
          $ref: '#/components/schemas/Country'
        city:
          $ref: '#/components/schemas/City'
        zip_code:
          $ref: '#/components/schemas/ZIPCode'
        state:
          $ref: '#/components/schemas/State'
        shipping_street_address:
          $ref: '#/components/schemas/StreetAddress'
        shipping_country:
          $ref: '#/components/schemas/Country'
        shipping_city:
          $ref: '#/components/schemas/City'
        shipping_zip_code:
          $ref: '#/components/schemas/ZIPCode'
        shipping_state:
          $ref: '#/components/schemas/State'
        cc:
          type: array
          items:
            $ref: '#/components/schemas/Email'
          description: Email addresses to receive a carbon copy of all notification emails
        bcc:
          type: array
          items:
            $ref: '#/components/schemas/Email'
          description: >-
            Email addresses to receive a blind carbon copy of all notification
            emails
        legal_name:
          type: string
          maxLength: 128
          description: Legal name of company
        brand_name:
          type: string
          maxLength: 128
          description: Company brand name
        registration_number:
          type: string
          maxLength: 32
          description: Registration number of company
        tax_number:
          type: string
          maxLength: 32
          description: Tax payer registration number
      allOf:
        - $ref: '#/components/schemas/BankAccount'
    ClientRecurringToken:
      allOf:
        - $ref: '#/components/schemas/BaseModel'

          properties:
            payment_method:
              type: string
              readOnly: true
              description: Payment method used to create this token, e.g. `card`.
            description:
              type: string
              readOnly: true
              description: >-
                Description of this token, if available. For card payments, this
                field will contain the masked card number.
    CompanyStatement:
      type: object
      properties:
        format:
          type: string
          maxLength: 32
          description: 'Statement format, available formats: `csv`, `xlsx`.'
        timezone:
          type: string
          format: TZ database name
          description: Timezone to localize statement-specific timestamps
          example: Europe/Oslo
        is_test:
          type: boolean
          readOnly: true
          description: >-
            Indicates this is a test object, created using test API keys or
            using Billing section of UI while in test mode.
        company_uid:
          type: string
          format: uuid
          readOnly: true
          description: ID of the Company.
        query_string:
          type: string
          readOnly: true
          description: Query parameters used to generate statement.
        status:
          type: string
          readOnly: true
          description: >-
            Status of statement generation e.g. `pending`, `processing`,
            `success`.
        download_url:
          type: string
          readOnly: true
          description: Download URL of a statement.
        began_on:
          readOnly: true
          description: Date and time for the beginning of statement generation process.
          allOf:
            - $ref: '#/components/schemas/UnixTimestamp'
        finished_on:
          readOnly: true
          description: Date and time for finishing the statement generation process.
          allOf:
            - $ref: '#/components/schemas/UnixTimestamp'
        created_on:
          readOnly: true
          description: Object creation time
          allOf:
            - $ref: '#/components/schemas/UnixTimestamp'
        updated_on:
          readOnly: true
          description: Object last modification time
          allOf:
            - $ref: '#/components/schemas/UnixTimestamp'
        type:
          type: string
          readOnly: true
          description: Statement request type
        id:
          type: string
          format: uuid
          readOnly: true
          description: ID of a statement
    Country:
      type: string
      maxLength: 2
      format: ISO 3166-1 alpha-2
    Currency:
      type: string
      maxLength: 3
      format: ISO 4217
      description: >-
        Currency code in the ISO 4217 standard (e.g. 'EUR').  Default currency
        is `EUR`.
    Email:
      type: string
      format: email
      maxLength: 254
      description: Email address
    Event:
      type: string
      enum:
        - purchase.created
        - purchase.paid
        - purchase.payment_failure
        - purchase.pending_execute
        - purchase.pending_charge
        - purchase.cancelled
        - purchase.hold
        - purchase.captured
        - purchase.pending_capture
        - purchase.released
        - purchase.pending_release
        - purchase.preauthorized
        - purchase.pending_recurring_token_delete
        - purchase.recurring_token_deleted
        - purchase.subscription_charge_failure
        - purchase.pending_refund
        - payment.refunded
        - billing_template_client.subscription_billing_cancelled
        - payout.pending
        - payout.failed
        - payout.success
    FeeSell:
      allOf:
        - $ref: '#/components/schemas/MoneyAmount'
        - description: Fees applied to transactions
    IssuerDetails:
      description: >-
        Read-only details of issuer company/brand, persisted for invoice
        display.
      readOnly: true
      properties:
        website:
          readOnly: true
          description: Company website URL
          allOf:
            - $ref: '#/components/schemas/URL'
        legal_street_address:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/StreetAddress'
        legal_country:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Country'
        legal_city:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/City'
        legal_zip_code:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/ZIPCode'
        bank_accounts:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/BankAccount'
        legal_name:
          type: string
          maxLength: 128
          description: Legal name of company
          readOnly: true
        brand_name:
          type: string
          maxLength: 128
          description: Company brand name
          readOnly: true
        registration_number:
          type: string
          maxLength: 32
          description: Registration number of company
          readOnly: true
        tax_number:
          type: string
          maxLength: 32
          description: Tax payer registration number
          readOnly: true
    MoneyAmount:
      type: integer
      description: >-
        Amount of money as the smallest indivisible units of the currency.
        Examples: 1 cent for EUR and 1 Yen for JPY.
    Payment:
      description: >-
        A record of a performed financial transaction. Can be generated e.g. as
        a result of refund operation.
      properties:
        client:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/ClientDetails'
        payment:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/PaymentDetails'
        transaction_data:
          type: object
          description: >-
            Payment method-specific, read-only, internal transaction data. Will
            contain information about all the transaction attempts, if
            available.
          nullable: true
          readOnly: true
        related_to:
          type: object
          nullable: true
          readOnly: true

          properties:
            type:
              type: string
              readOnly: true
              description: Object type identifier
            id:
              type: string
              format: uuid
              readOnly: true
        reference_generated:
          type: string
          readOnly: true

        reference:
          type: string
          maxLength: 128
          readOnly: true
          description: Invoice reference.
        account_id:
          type: string
          format: uuid
          readOnly: true
          description: ID of an account this Payment is associated with.
        company_id:
          type: string
          format: uuid
          readOnly: true
        is_test:
          type: boolean
          readOnly: true

        user_id:
          type: string
          format: uuid
          nullable: true
          readOnly: true
          description: >-
            ID of user who has created this object in the Billing UI, if
            applicable.
        brand_id:
          type: string
          format: uuid
          readOnly: true
          description: ID of the brand this Payment is associated with.
      allOf:
        - $ref: '#/components/schemas/BaseModel'
    PaymentDetails:
      properties:
        is_outgoing:
          type: boolean
          default: false
          description: >-
            Denotes the direction of payment, e.g. for a paid Purchase, is
            granted to be `false`, `true` for payouts.
        payment_type:
          type: string
          readOnly: true
          enum:
            - purchase
            - purchase_charge
            - payout
            - bank_payment
            - refund
            - custom
        amount:
          $ref: '#/components/schemas/MoneyAmount'
        currency:
          $ref: '#/components/schemas/Currency'
        net_amount:
          x-summary: >-
            Net amount of payment with all fees and pending amount subtracted.
            `amount` = `net_amount` + `fee_amount` + `pending_amount`. The
            respective account is credited or debited with this value.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/MoneyAmount'
        fee_amount:
          x-summary: >-
            Amount of fees for this payment. For a Purchase's PurchaseDetails
            this is the calculated transaction fee.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/MoneyAmount'
        pending_amount:

          readOnly: true
          allOf:
            - $ref: '#/components/schemas/MoneyAmount'
        pending_unfreeze_on:

          readOnly: true
          nullable: true
          default: null
          allOf:
            - $ref: '#/components/schemas/UnixTimestamp'
        description:
          type: string
          maxLength: 256
        paid_on:
          readOnly: true

          allOf:
            - $ref: '#/components/schemas/UnixTimestamp'
        remote_paid_on:
          readOnly: true

          allOf:
            - $ref: '#/components/schemas/UnixTimestamp'
    PaymentMethod:
      type: string
      enum:
        - unknown
    Payout:
      description: >-
        Record of a single payout operation. Has a status attribute, e.g. can be
        initialized, error or success.
      required:
        - payment
        - client
        - brand_id
      properties:
        payment:
          required:
            - amount
            - currency
          allOf:
            - $ref: '#/components/schemas/PaymentDetails'
        client:
          required:
            - email
            - phone
          allOf:
            - $ref: '#/components/schemas/ClientDetails'
        transaction_data:
          type: object

          readOnly: true
          properties:
            payment_method:
              type: string
              description: Payment method used if Payout was paid, blank string otherwise.
            extra:
              type: object

            country:
              type: string

            attempts:
              type: array

              items:
                type: object
                properties:
                  successful:
                    type: boolean
                    description: >-
                      If this attempt was successful or not. For `false`,
                      `error` of this attempt will be not null.
                  payment_method:
                    type: string
                    description: Payment method used for this attempt.
                  extra:
                    type: object

                  country:
                    type: string

                  client_ip:
                    type: string
                    format: IP
                    description: IP the paying client made this attempt from, if available.
                  processing_time:

                    allOf:
                      - $ref: '#/components/schemas/UnixTimestamp'
                  error:
                    type: object
                    nullable: true
                    description: >-
                      Code and description of the error encountered. Not-null if
                      `successful` parameter of this attempt is `false`.
                    properties:
                      code:
                        type: string

                      message:
                        type: string
                        description: Verbose name and explanation of this error.
        reference_generated:
          type: string
          readOnly: true
          description: >-
            If you don't provide an invoice `reference` yourself, this
            autogenerated value will be used as a reference instead.
        reference:
          type: string
          maxLength: 128
          description: Payout reference.
        status:
          $ref: '#/components/schemas/PayoutStatus'
        status_history:
          type: array
          readOnly: true
          description: History of status changes, latest last.
          items:
            properties:
              status:
                $ref: '#/components/schemas/PayoutStatus'
              timestamp:
                $ref: '#/components/schemas/UnixTimestamp'
        sender_name:
          type: string
          maxLength: 40
          description: Name of payout sender.
        recipient_card_country:
          type: string
          readOnly: true
          description: >-
            Recipient's card's registration country. Country code in the ISO
            3166-1 alpha-2 format (e.g. `GB`).
        recipient_card_brand:
          type: string
          readOnly: true
          description: Recipient's card's brand, e.g. `visa` or `mastercard`.
        execution_url:
          type: string
          readOnly: true
          description: >-
            URL that must be used for payout execution. See details in
            description.
        brand_id:
          type: string
          format: uuid
          description: >-
            ID of the brand to create this Payout for. You can copy it down in
            the API section, see the "specify the ID of the Brand" link in
            answer to "How to setup payments on website or in mobile app?".
        company_id:
          type: string
          format: uuid
          readOnly: true
        is_test:
          type: boolean
          readOnly: true
          description: >-
            Indicates this is a test object, created using test API keys or
            using Billing section of UI while in test mode.
        user_id:
          type: string
          format: uuid
          nullable: true
          readOnly: true
          description: >-
            ID of user who has created this object in the Billing UI, if
            applicable.
      allOf:
        - $ref: '#/components/schemas/BaseModel'
    PayoutStatus:
      type: string

      default: initialized
      readOnly: true
      enum:
        - initialized
        - pending
        - error
        - success
    PeriodUnits:
      type: string
      enum:
        - days
        - weeks
        - months
    Phone:
      type: string
      format: phone
      maxLength: 32
      description: Phone number in the `<country_code> <number>` format
      example: +44 45643564564
    Product:
      required:
        - name
        - price
      properties:
        name:
          type: string
          maxLength: 256
          description: Product name
        quantity:
          type: number
          format: float
          minimum: 0
          default: 1
          description: Quantity of these products in invoice
        price:
          minimum: 0
          description: >-
            You can use this field or total_override with a value of 0 to
            activate preauthorization scenario. See the description of the
            Purchase.skip_capture field.
          allOf:
            - $ref: '#/components/schemas/MoneyAmount'
        discount:
          type: integer
          format: int64
          minimum: 0
          description: Total discount per this product in invoice
          default: 0
          allOf:
            - $ref: '#/components/schemas/MoneyAmount'
        tax_percent:
          type: number
          format: float
          minimum: 0
          maximum: 100
          default: 0
          description: Percent of tax added to the price of this product
        category:
          type: string
          maxLength: 256
          description: Product category
    PublicKey:
      type: string
      description: >-
        PEM-encoded RSA public key for authenticating webhook or callback
        payloads
      readOnly: true
      example: |-
        -----BEGIN PUBLIC KEY-----
        MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEA6gLlBKxCB5dxPJbinCzl
        hOfKSgQtOWQQBxmnWIkEVUbqhpnqr3xNYiAvDyMUxYUwuzN44eHO+mR9MZWcSx3c
        bXmKa3gsOzR6GdcOxMGaVxvfje+fujCAlCtO1BP+A9/FS3KcPgCYG1wtAPwA5IAf
        HylL3TsUVIJQFBgiBr6N4Bgapr9eloaFfeYIBRsXmxPKAMJivqxYpLh0V3N4ZFd5
        TGqSEAa4b1ULDr6p0sB2L3QikTdsF0zp03zNceKA6fXDOzD0xWtg9buXvyKwePK4
        M2kcnWBNfsWghrdg0fG3O9bmkaS1oEXydrmJfuiI8h6a64J/1nzooi2yLC9D6Ta0
        S63bbuAHymnQtiNuV7Ixp6IoTGFaS88aTiHaP8rdyWV8JTDFx0qeDzyaGWiYGwEF
        mj/buHCEcRhoajbGkPhYA4YEdn4jy1wZhEr2OMdBPM7mPPI0Hy3hcNJVMVVlrpHe
        IltQATpjlNaJMlRPjbcaiW7dsO3BuF9ZOMGksSOnyYm/AgMBAAE=
        -----END PUBLIC KEY-----
    Purchase:
      required:
        - client
        - purchase
        - brand_id
      properties:
        client:
          description: Either this or `.client_id` is required.
          allOf:
            - $ref: '#/components/schemas/ClientDetails'
        purchase:
          $ref: '#/components/schemas/PurchaseDetails'
        payment:
          readOnly: true
          nullable: true
          allOf:
            - $ref: '#/components/schemas/PaymentDetails'
        issuer_details:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/IssuerDetails'
        transaction_data:
          type: object
          description: >-
            Payment method-specific, read-only transaction data. Will contain
            information about all the transaction attempts and possible errors,
            if available.
          readOnly: true
          properties:
            payment_method:
              type: string
              description: >-
                Payment method used if Purchase was paid, blank string
                otherwise.
            extra:
              type: object

            country:
              type: string

            attempts:
              type: array
              description: >-
                Will contain information about all the payment attempts made and
                errors encountered, if any.
              items:
                type: object
                properties:
                  type:
                    type: string
                    description: Type of action attempted
                    enum:
                      - execute
                      - authorize
                      - release
                      - capture
                      - recurring_execute
                      - delete_recurring_token
                      - refund
                  successful:
                    type: boolean
                    description: >-
                      If this attempt was successful or not. For `false`,
                      `error` of this attempt will be not null.
                  payment_method:
                    type: string
                    description: Payment method used for this attempt.
                  extra:
                    type: object

                  country:
                    type: string

                  client_ip:
                    type: string
                    format: IP
                    description: IP the paying client made this attempt from, if available.
                  processing_time:
                    description: >-
                      Time (if possible, fetched from the remot processing
                      system) this attempt happened at.
                    allOf:
                      - $ref: '#/components/schemas/UnixTimestamp'
                  error:
                    type: object
                    nullable: true
                    description: >-
                      Code and description of the error encountered. Not-null if
                      `successful` parameter of this attempt is `false`.
                    properties:
                      code:
                        type: string

                      message:
                        type: string
                        description: Verbose name and explanation of this error.
        status:
          $ref: '#/components/schemas/PurchaseStatus'
        status_history:
          type: array
          readOnly: true
          description: >-
            History of status changes, latest last. Might contain entry about a
            related object, e.g. status change to `refunded` will contain a
            reference to the refund Payment.
          items:
            properties:
              status:
                $ref: '#/components/schemas/PurchaseStatus'
              timestamp:
                $ref: '#/components/schemas/UnixTimestamp'
              related_object:
                nullable: true
                properties:
                  type:
                    type: string
                  id:
                    type: string
                    format: uuid
        viewed_on:
          description: Time the payment form or invoice page was first viewed on
          readOnly: true
          nullable: true
          allOf:
            - $ref: '#/components/schemas/UnixTimestamp'
        company_id:
          type: string
          format: uuid
          readOnly: true
        is_test:
          type: boolean
          readOnly: true
          description: >-
            Indicates this is a test object, created using test API keys or
            using Billing section of UI while in test mode.
        user_id:
          type: string
          format: uuid
          nullable: true
          readOnly: true
          description: >-
            ID of user who has created this object in the Billing UI, if
            applicable.
        brand_id:
          type: string
          format: uuid
          description: >-
            ID of the brand to create this Purchase for. You can copy it down in
            the API section, see the "specify the ID of the Brand" link in
            answer to "How to setup payments on website or in mobile app?".
        billing_template_id:
          type: string
          format: uuid
          nullable: true
          readOnly: true
          description: ID of a BillingTemplate that has spawned this Purchase, if any.
        client_id:
          type: string
          format: uuid
          nullable: true
          default: null

        send_receipt:
          type: boolean
          default: false
          description: Whether to send receipt email for this Purchase when it's paid.
        is_recurring_token:
          type: boolean
          readOnly: true

        recurring_token:
          type: string
          format: uuid
          readOnly: true
          nullable: true

        skip_capture:
          type: boolean
          default: false

        force_recurring:
          type: boolean
          default: false

        reference_generated:
          type: string
          readOnly: true

        reference:
          type: string
          maxLength: 128
          description: Invoice reference.
        issued:

          nullable: true
          allOf:
            - $ref: '#/components/schemas/Timestamp'
        due:

          nullable: true
          allOf:
            - $ref: '#/components/schemas/UnixTimestamp'
        refund_availability:

          type: string
          readOnly: true
          enum:
            - all
            - full_only
            - partial_only
            - pis_all
            - pis_partial
            - none
        refundable_amount:
          x-summary: Amount available for refunds.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/MoneyAmount'
        currency_conversion:
          type: object
          readOnly: true
          nullable: true

          properties:
            original_currency:
              readOnly: true
              type: string
              description: Currency this purchase was initially created with
            original_amount:
              readOnly: true
              type: integer
              description: Amount this purchase was initially created with
            exchange_rate:
              readOnly: true
              type: number
              description: >-
                Exchanged rate that was used for currency conversion. Original
                amount was multiplied by this number to calculate the new
                purchase amount.
        payment_method_whitelist:
          type: array
          minItems: 1

          items:
            type: string
            description: Payment method name as returned by `GET /payment_methods/`.
        success_redirect:

          allOf:
            - $ref: '#/components/schemas/URL'
        failure_redirect:

          allOf:
            - $ref: '#/components/schemas/URL'
        cancel_redirect:




          allOf:
            - $ref: '#/components/schemas/URL'
        success_callback:
          description: >-
            When Purchase is paid for successfully, the `success_callback` URL
            will receive a POST request with the Purchase object's data in body.
          allOf:
            - $ref: '#/components/schemas/URL'
        creator_agent:
          type: string
          maxLength: 32
          description: >-
            Identification of software (e.g. an ecommerce module and version)
            used to create this purchase, if any.
        platform:
          type: string
          enum:
            - web
            - api
            - ios
            - android
            - macos
            - windows
          description: Platform this Purchase was created on.
        product:
          type: string
          readOnly: true
          enum:
            - purchases
            - billing_invoices
            - billing_subscriptions
            - billing_subscriptions_invoice
          description: Defines which gateway product was used to create this Purchase.
        created_from_ip:
          type: string
          format: IP
          readOnly: true
          description: IP the Purchase was created from.
        invoice_url:
          description: >-
            URL you will be able to access invoice for this Purchase at, if
            applicable
          readOnly: true
          nullable: true
          allOf:
            - $ref: '#/components/schemas/URL'
        checkout_url:

          readOnly: true
          allOf:
            - $ref: '#/components/schemas/URL'
        direct_post_url:

          readOnly: true
          nullable: true
          allOf:
            - $ref: '#/components/schemas/URL'
        marked_as_paid:
          type: boolean
          readOnly: true
          description: True if a purchase was manually marked as paid.
        order_id:
          type: string
          readOnly: true
          description: ID of corresponding order.
        upsell_campaigns:
          type: array
          items:
            type: string
            format: uuid
          description: Array of IDs of related Upsell campaigns.
        referral_campaign_id:
          type: string
          format: uuid
          nullable: true
          description: ID of Referral campaign.
        referral_code:
          type: string
          readOnly: true
          description: Referral code used with purchase.
        referral_code_generated:
          type: string
          readOnly: true
          description: Referral code created by purchase.
        referral_code_details:
          type: object
          readOnly: true
          description: Referral code detailed information for purchase.
          properties:
            campaign_id:
              type: string
              format: uuid
              readOnly: true
              description: Referral campaign ID.
            reward_type:
              type: string
              enum:
                - gift
                - discount
                - money
              readOnly: true
              description: Reward type of applied Referral code.
            discount_amount:
              readOnly: true
              allOf:
                - $ref: '#/components/schemas/MoneyAmount'
            discount_percent:
              type: number
              format: float
              readOnly: true
              description: Discount percent of applied Referral code
        retain_level_details:
          type: object
          readOnly: true
          description: Retain level detailed information for purchase.
          properties:
            campaign_id:
              type: string
              format: uuid
              readOnly: true
              description: Retain campaign ID.
            discount_amount:
              readOnly: true
              allOf:
                - $ref: '#/components/schemas/MoneyAmount'
            discount_percent:
              type: number
              format: float
              readOnly: true
              description: Discount percent of applied Retain level.
      allOf:
        - $ref: '#/components/schemas/BaseModel'
    PurchaseDetails:
      description: >-
        Core information about the Purchase, including the products, total,
        currency and invoice fields. If you're using invoicing via `/billing/`
        or `/billing_templates/`, this object will be copied 1:1 from
        BillingTemplate you specify to the resulting Purchases (also to
        subscription Purchases).
      required:
        - products
      properties:
        currency:
          $ref: '#/components/schemas/Currency'
        products:
          type: array
          minItems: 1
          description: >-
            Line items of the invoice. In case of a transaction with no invoice
            sent, specify a single Product forming the cost of transaction.
          items:
            $ref: '#/components/schemas/Product'
        total:
          readOnly: true
          x-summary: Calculated from `products`. You don't need to specify it.
          allOf:
            - $ref: '#/components/schemas/MoneyAmount'
        language:
          x-summary: Language of invoice/payment forms.
          type: string
          format: ISO 639-1
          maxLength: 2
          description: Language code in the ISO 639-1 format (e.g. 'en')
          default: >-
            Default value is controlled in Company -> Brand section of merchant
            portal separately per each Brand used (default value, if no changes
            are made, is `en`). Brand to be used with corresponding
            Purchase/BillingTemplate specified using brand_id.
        notes:
          x-summary: Invoice notes.
          type: string
          maxLength: 10000
        debt:
          type: integer
          format: int64
          default: 0
          x-summary: Will be added/substracted to the invoice total, if present.
          x-minValue: '`total` * -1'
          allOf:
            - $ref: '#/components/schemas/MoneyAmount'
        subtotal_override:
          default: null
          nullable: true
          x-summary: >-
            If specified and not null, will override the grand subtotal. This
            field is visual-only, setting it won't impact `total`.
          allOf:
            - $ref: '#/components/schemas/MoneyAmount'
        total_tax_override:
          default: null
          nullable: true
          x-summary: >-
            If specified and not null, will override the total tax. This field
            is visual-only, setting it won't impact `total`.
          allOf:
            - $ref: '#/components/schemas/MoneyAmount'
        total_discount_override:
          default: null
          nullable: true
          x-summary: >-
            If specified and not null, will override the total discount. This
            field is visual-only, setting it won't impact `total`.
          allOf:
            - $ref: '#/components/schemas/MoneyAmount'
        total_override:
          default: null
          nullable: true
          x-summary: >-
            If specified and not null, will override the total (unlike the rest
            of `total_*_override` fields).


            You can use this field or `products[].total` with a value of 0 to
            activate preauthorization scenario. See the description of the
            `Purchase.skip_capture` field.
          allOf:
            - $ref: '#/components/schemas/MoneyAmount'
        request_client_details:
          type: array
          description: >-
            ClientDetails fields to request from the client before the payment.
            If a value is passed for a field in ClientDetails, it will be
            automatically removed from this list.
          default: [ ]
          uniqueItems: true
          items:
            type: string
            enum:
              - email
              - phone
              - full_name
              - personal_code
              - brand_name
              - legal_name
              - registration_number
              - tax_number
              - bank_account
              - bank_code
              - billing_address
              - shipping_address
        timezone:
          type: string
          format: TZ database name
          description: >-
            Timezone to localize invoice-specific timestamps in, e.g. to display
            a concrete date for a `due` timestamp on the invoice.
          example: Europe/Oslo
        due_strict:
          type: boolean
          default: false

        email_message:
          type: string
          readOnly: true
          maxLength: 256
          description: >-
            An optional message to display to your customer in invoice email,
            e.g. "Your invoice for June".
    PurchaseStatus:
      type: string
      default: created
      readOnly: true
      enum:
        - created
        - sent
        - viewed
        - error
        - cancelled
        - overdue
        - expired
        - blocked
        - hold
        - released
        - pending_release
        - pending_capture
        - preauthorized
        - paid
        - pending_execute
        - pending_charge
        - cleared
        - settled
        - chargeback
        - pending_refund
        - refunded
    State:
      type: string
      maxLength: 128
      description: State code
    StreetAddress:
      type: string
      maxLength: 128
      description: Street house number and flat address where applicable
    Timestamp:
      type: string
      format: ISO 8601 (YYYY-MM-DD)
      example: '2020-04-30'
    TransactionFlow:
      type: string
      enum:
        - api
        - direct_post
        - fluentforms
        - formidableforms
        - givewp
        - gravityforms
        - hostbill
        - import
        - link
        - magento
        - opencart
        - payform
        - paymattic
        - prestashop
        - server_to_server
        - shopify
        - web_office
        - whmcs
        - woocommerce
        - woocommerce_subscriptions
        - wpcharitable
        - wpfunnels
    TransactionProduct:
      type: string
      enum:
        - bank_payment
        - chargeback
        - custom_payment
        - invoice
        - purchase
        - refund
        - subscription
    Turnover:
      type: object
      description: Company turnover statistics
      properties:
        turnover:
          allOf:
            - $ref: '#/components/schemas/MoneyAmount'
            - description: Amount transferred through a company
        fee_sell:
          $ref: '#/components/schemas/FeeSell'
        count:
          type: object
          description: Transaction counts processed withing the selected filters
          properties:
            all:
              type: integer
      example:
        turnover: 93408
        fee_sell: 1750
        count:
          all: 175
    TurnoverPair:
      type: object
      description: Incoming and outgoing Company turnover statistics
      properties:
        incoming:
          $ref: '#/components/schemas/Turnover'
        outgoing:
          $ref: '#/components/schemas/Turnover'
    URL:
      type: string
      format: url
      maxLength: 500
    UnixTimestamp:
      type: integer
      format: Unix timestamp (seconds)
      example: 1619740800
    Webhook:
      allOf:
        - $ref: '#/components/schemas/BaseModel'
          required:
            - title
            - events
            - callback
          properties:
            title:
              type: string
              maxLength: 100
              description: Arbitrary title of webhook
            all_events:
              type: boolean
              default: false
              description: >-
                Specifies this webhook should trigger on all event types. Either
                this or `events` is required.
            public_key:
              $ref: '#/components/schemas/PublicKey'
            events:
              type: array
              minItems: 1
              uniqueItems: true
              description: >-
                List of events to trigger webhook callbacks for. Either this or
                `all_events` is required.
              items:
                $ref: '#/components/schemas/Event'
            callback:
              $ref: '#/components/schemas/URL'
    ZIPCode:
      type: string
      maxLength: 32
      description: ZIP or postal code
    mandateinformation:
      type: object
      properties:
        account_info:
          $ref: '#/components/schemas/accountinformation'
        mandateId:
          type: string
          example: "12345678"
        dateOfsignature:
          type: string
          format: date
        personId:
          type: string
          example: "7887115487"
        isamended:
          type: boolean
        electronicsignature:
          type: string
    accountinformation:
      type: object
      properties:
        IBAN:
          type: string
          example: "NL91ABNA0123456789"
        name:
          type: string
          example: "Paying Guy"
    collectioninformation:
      type: object
      properties:
        customerIdIdentifier:
          type: integer
          format: int64
          example: 124567
        mandateId:
          type: integer
          format: int64
          example: 124567
        amount:
          type: number
          format: float
        currency:
          type: string
        collectiondate:
          readOnly: true
          description: Object creation time
          allOf:
            - $ref: '#/components/schemas/UnixTimestamp'

        status:
          type: string

    # Schemas Used in the Orchestrator. Not part of API
    UserDTO:
      type: object
      properties:
        customerIdIdentifier:
          type: integer
          format: int64
        iban:
          type: string
        fullName:
          type: string
        token:
          type: string
        address:
          type: string
        activationDate:
          type: string
          format: date-time

    address:
      type: object
      properties:
        streetName:
          type: string
          example: "High Street"
        streetNumber:
          type: string
          example: "99"
        city:
          type: string
          example: "Rotterdam"
        zipcode:
          type: string
          example: "1000AA"
        country:
          type: string
          example: "NL"

    accountinformationRequest:
      type: object
      properties:
        IBAN:
          type: string
          example: "NL91ABNA0123456789"
        name:
          type: string
          example: "Paying Guy"
        address:
          $ref: '#/components/schemas/address'

    TransactionRequest:
      type: object
      properties:
        account_info:
          $ref: '#/components/schemas/accountinformationRequest'

    mandateinformationRequest:
      type: object
      properties:
        mandateId:
          type: string
          example: "12345678"
        dateOfsignature:
          type: string
          format: date
        personId:
          type: string
          example: "7887115487"
        isamended:
          type: boolean
        electronicsignature:
          type: string

    transactiontype:
      type: string
      enum:
        - 'FRST'
        - 'Recurring'
        - 'Final'
        - 'One-Off'

    DirectDebitRequest:
      allOf:
        - $ref: '#/components/schemas/TransactionRequest'
        - type: object
          properties:
            mandate_information:
              $ref: '#/components/schemas/mandateinformationRequest'
            authorisation1_code:
              type: string
            transaction_type:
              $ref: '#/components/schemas/transactiontype'

            internal_transaction_reference:
              type: string
              example: "f47ac10b58cc4372a5670e02b2c3d479"

    statusenum:
      type: string
      enum:
        - 'created'
        - 'missing mandatory fields'
        - 'invalid field values'
        - 'duplicated'
        - 'not_found'
        - 'deleted'
        - 'processing'
        - 'completed'
        - 'cancelled'

    TransactionResponse:
      type: object
      properties:
        transactionId:
          type: string
        end_to_end_transaction_reference:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/statusenum'
        status_description:
          type: string

    CreditTransferRequest:
      allOf:
        - $ref: '#/components/schemas/TransactionRequest'
        - type: object
          properties:
            additional_info:
              type: string
            remittance_info:
              type: string

    processingstatusenum:
      type: string
      enum:
        - 'pending'
        - 'processed'
        - 'authorized'
        - 'settled'
        - 'refunded'

    TransactionStatusResponse:
      type: object
      properties:
        transactionId:
          type: string
        end_to_end_transaction_reference:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/statusenum'
        processingStatus:
          $ref: '#/components/schemas/processingstatusenum'
          nullable: true
        lastUpdated:
          type: string

    MandateDTO:
      type: object
      properties:
        mandateIdentifier:
          type: integer
          format: int64
        customer:
          type: integer
          format: int64
        merchant:
          type: integer
          format: int64
        signatureDate:
          type: string
          format: date
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
      required:
        - customer
        - merchant
        - signatureDate
        - startDate
